View(tad %>% filter(virus = 'Rift Valley fever virus'))
View(tad %>% filter(virus == 'Rift Valley fever virus'))
View(tad %>% filter(virus == 'Rift Valley Fever virus'))
View(tad %>% filter(virus == 'Rift valley fever virus'))
library(vegan)
data(mite.xy)
mite.xy
pcnm1 <- pcnm(dist(mite.xy))
op <- par(mfrow=c(1,3))
## Map of PCNMs in the sample plot
ordisurf(mite.xy, scores(pcnm1, choi=1), bubble = 4, main = "PCNM 1")
ordisurf(mite.xy, scores(pcnm1, choi=2), bubble = 4, main = "PCNM 2")
ordisurf(mite.xy, scores(pcnm1, choi=3), bubble = 4, main = "PCNM 3")
par(op)
## Plot first PCNMs against each other
ordisplom(pcnm1, choices=1:4)
## Weighted PCNM for CCA
data(mite)
rs <- rowSums(mite)/sum(mite)
pcnmw <- pcnm(dist(mite.xy), w = rs)
ord <- cca(mite ~ scores(pcnmw))
## Multiscale ordination: residual variance should have no distance
## trend
msoplot(mso(ord, mite.xy))
?Nmds
??nmds
clo <- read.csv("~/GitHub/clovert_dev/output/clovert_versions/CLOVERT_ReconciledAssociations_Taxize.csv")
clo
length(unique(clo$HostHarmonised_Taxize))
length(unique(clo$PathogenType
))
library(tidyverse)
clo <- read_csv("~/GitHub/clovert_dev/output/clovert_versions/CLOVERT_ReconciledAssociations_Taxize.csv")
clo %>% filter(PathogenType == "Virus")
clo %>% filter(PathogenType == "virus")
clo %>% filter(PathogenType == "virus") -> clo
clo %>% select(HostHarmonised_Taxize, Pathogen_Harm2) %>% unique()
clo %>% pull(HostHarmonised_Taxize)
clo %>% pull(HostHarmonised_Taxize) %>% unique
clo %>% pull(Pathogen_Harm2) %>% unique
clo %>% pull(HostHarmonised_Taxize) %>% unique %>% length
clo %>% pull(Pathogen_Harm2) %>% unique %>% length
library(taxize)
classification(get_uid("Adeno-associated virus 3b"), db = "ncbi")
classification(get_uid("Adeno-associated virus - 3", "Adeno-associated virus 3B"), db = "ncbi")
classification(get_uid("Adeno-associated virus - 3"), db = "ncbi")
classification(get_uid("Adeno-associated virus 3B"), db = "ncbi")
classification(get_uid("Adeno-associated virus_adv-20"), db = "ncbi")
classification(get_uid("Adenovirus predict_adv-20"), db = "ncbi")
library(taxize)
get_uid("Human parainfluenza virus 1", db = "ncbi")
classification(12730)
classification(12730, db = "ncbi")
get_uid(c("Human parainfluenza virus 1"), db = "ncbi")
get_uid(c("Human parainfluenza virus 1", "HIV"), db = "ncbi")
get_uid(c("Human parainfluenza virus 1", "HIV"), db = "ncbi") -> x
x
k
j
x
classification(x)
library(taxize)
get_uid("Influenza A virus")
get_uid("Influenza A virus", division_filter = "viruses")
get_uid("Influenza A virus")
get_uid("Influenza A virus", division_filter = "viruses")
get_uid("Homo sapiens", division_filter = "viruses")
get_uid("Homo sapiens", division_filter = "virus")
get_uid("Homo sapiens", division_filter = "Virus")
get_uid("Homo sapiens", division_filter = "monocots")
library(taxize)
library(tidyverse)
test <- c("Adeno-associated virus - 3",
"Adeno-associated virus 3B",
"Adenovirus predict_adv-20",
"A bad name")
mutate_cond <- function(.data, condition, ..., envir = parent.frame()) {
condition <- eval(substitute(condition), .data, envir)
.data[condition, ] <- .data[condition, ] %>% mutate(...)
.data
}
hdict <- function(names) {
names.orig <- names
names <- str_replace(names, " sp\\.","")
names <- str_replace(names, " gen\\.","")
u <- get_uid(names, rank_filter = c("subspecies", "species", "genus", "family", "order", "class"),
division_filter = "vertebrates", ask = FALSE)
c <- classification(u)
n <- !is.na(u)
attributes(u) <- NULL
s <- unlist(lapply(c, function(x){tryCatch(x$name[[which(x$rank=="species")]], error = function(e) {NA})}), use.names = FALSE)
g <- unlist(lapply(c, function(x){tryCatch(x$name[[which(x$rank=="genus")]], error = function(e) {NA})}), use.names = FALSE)
f <- unlist(lapply(c, function(x){tryCatch(x$name[[which(x$rank=="family")]], error = function(e) {NA})}), use.names = FALSE)
o <- unlist(lapply(c, function(x){tryCatch(x$name[[which(x$rank=="order")]], error = function(e) {NA})}), use.names = FALSE)
c2 <- unlist(lapply(c, function(x){tryCatch(x$name[[which(x$rank=="class")]], error = function(e) {NA})}), use.names = FALSE)
levels <- c("species", "genus", "family", "order", "class")
u <- unlist(lapply(c, function(x){tryCatch(last(na.omit(x[x$rank %in% levels,'id'])),
error = function(e) {NA})}), use.names = FALSE)
data.frame(HostOriginal = names.orig,
HostTaxID = u,
HostNCBIResolved = n,
Host = s,
HostGenus = g,
HostFamily = f,
HostOrder = o,
HostClass = c2) %>% mutate_cond(HostNCBIResolved == FALSE, Host = HostOriginal) %>% return()
}
vdict <- function(names) {
names.orig <- names
u <- get_uid(names, ask = FALSE)
c <- classification(u)
n <- !is.na(u)
attributes(u) <- NULL
s <- unlist(lapply(c, function(x){tryCatch(x$name[[which(x$rank=="species")]], error = function(e) {NA})}), use.names = FALSE)
g <- unlist(lapply(c, function(x){tryCatch(x$name[[which(x$rank=="genus")]], error = function(e) {NA})}), use.names = FALSE)
f <- unlist(lapply(c, function(x){tryCatch(x$name[[which(x$rank=="family")]], error = function(e) {NA})}), use.names = FALSE)
o <- unlist(lapply(c, function(x){tryCatch(x$name[[which(x$rank=="order")]], error = function(e) {NA})}), use.names = FALSE)
c2 <- unlist(lapply(c, function(x){tryCatch(x$name[[which(x$rank=="class")]], error = function(e) {NA})}), use.names = FALSE)
levels <- c("species", "genus", "family", "order", "class")
u <- unlist(lapply(c, function(x){tryCatch(last(na.omit(x[x$rank %in% levels,'id'])),
error = function(e) {NA})}), use.names = FALSE)
data.frame(VirusOriginal = names.orig,
VirusTaxID = u,
VirusNCBIResolved = n,
Virus = s,
VirusGenus = g,
VirusFamily = f,
VirusOrder = o,
VirusClass = c2) %>% mutate_cond(VirusNCBIResolved == FALSE, Virus = VirusOriginal) %>% return()
}
hdict(c("Homo sapiens", "Homo bapiens"))
vdict(c("Ascaris lumbricoides"))
# install.packages("devtools")
devtools::install_github("viralemergence/insectDisease")
library("insectDisease")
# install.packages("devtools")
devtools::install_github("viralemergence/insectDisease")
library("insectDisease")
library(tidyverse)
library(magrittr)
library(lubridate)
clo <- read_csv("~/Github/clovert_dev/clover/clover/CLOVER_1.0_Viruses_AssociationsFlatFile.csv")
temp <- data.frame(Host = character(),
Virus = character(),
HostTaxID = double(),
VirusTaxID = double(),
HostNCBIResolved = logical(),
VirusNCBIResolved = logical(),
HostGenus = character(),
HostFamily = character(),
HostOrder = character(),
HostClass = character(),
HostOriginal = character(),
HostSynonyms = character(),
VirusGenus = character(),
VirusFamily = character(),
VirusOrder = character(),
VirusClass = character(),
VirusOriginal = character(),
HostFlagID = logical(),
VirusFlagContaminant = logical(),
DetectionMethod = character(),
DetectionOriginal = character(),
Database = character(),
DatabaseVersion = character(),
PublicationYear = double(),
ReferenceText = character(),
PMID = double(),
NCBIAccession = character(),
ReleaseYear = double(),
ReleaseMonth = double(),
ReleaseDay = double(),
CollectionYear = double(),
CollectionMonth = double(),
CollectionDay = double(),
stringsAsFactors = FALSE)
# This step should go away after Rory updates CLOVERT with the "sp." thing
if(!("HostGenus" %in% colnames(clo))) { clo %<>% mutate(HostGenus = word(Host, 1)) }
# This step should go away after Rory updates to remove CitationID
if("CitationID" %in% colnames(clo)) {
clo %>%
rowwise() %>%
mutate(NCBIAccession = ifelse(CitationIDType=='NCBI Nucleotide', CitationID, NA),
PMID = ifelse(CitationIDType=='PMID', CitationID, NA)) %>%
select(-c(CitationID, CitationIDType)) -> clo
}
clo %<>% rename(Virus = "Pathogen",
VirusGenus = "PathogenGenus",
VirusFamily = "PathogenFamily",
VirusOrder = "PathogenOrder",
VirusClass = "PathogenClass",
DetectionOriginal = "DetectionMethodOriginal",
VirusNCBIResolved = "PathogenNCBIResolved",
VirusOriginal = "PathogenOriginal",
VirusTaxID = "PathogenTaxID")
clo %<>% select(-c(PathogenType,
Detection_NotSpecified,
Detection_Serology,
Detection_Genetic,
Detection_Isolation))
clo %<>% mutate(NCBIAccession = as.character(NCBIAccession))
clo %<>% select(-ICTVRatified)
# colnames(clo)[!(colnames(clo) %in% colnames(temp))] # Deleted check
bind_rows(temp, clo) -> clo
# Consistency steps: all lowercase names
clo %<>% mutate_at(c("Host", "HostGenus", "HostFamily", "HostOrder", "HostClass",
"Virus", "VirusGenus", "VirusFamily", "VirusOrder", "VirusClass"),
tolower)
write_csv(clo, 'Intermediate/Formatted/CLOVERFormatted.csv')
setwd("~/Github/virion")
library(tidyverse)
library(magrittr)
library(lubridate)
clo <- read_csv("~/Github/clovert_dev/clover/clover/CLOVER_1.0_Viruses_AssociationsFlatFile.csv")
temp <- data.frame(Host = character(),
Virus = character(),
HostTaxID = double(),
VirusTaxID = double(),
HostNCBIResolved = logical(),
VirusNCBIResolved = logical(),
HostGenus = character(),
HostFamily = character(),
HostOrder = character(),
HostClass = character(),
HostOriginal = character(),
HostSynonyms = character(),
VirusGenus = character(),
VirusFamily = character(),
VirusOrder = character(),
VirusClass = character(),
VirusOriginal = character(),
HostFlagID = logical(),
VirusFlagContaminant = logical(),
DetectionMethod = character(),
DetectionOriginal = character(),
Database = character(),
DatabaseVersion = character(),
PublicationYear = double(),
ReferenceText = character(),
PMID = double(),
NCBIAccession = character(),
ReleaseYear = double(),
ReleaseMonth = double(),
ReleaseDay = double(),
CollectionYear = double(),
CollectionMonth = double(),
CollectionDay = double(),
stringsAsFactors = FALSE)
# This step should go away after Rory updates CLOVERT with the "sp." thing
if(!("HostGenus" %in% colnames(clo))) { clo %<>% mutate(HostGenus = word(Host, 1)) }
# This step should go away after Rory updates to remove CitationID
if("CitationID" %in% colnames(clo)) {
clo %>%
rowwise() %>%
mutate(NCBIAccession = ifelse(CitationIDType=='NCBI Nucleotide', CitationID, NA),
PMID = ifelse(CitationIDType=='PMID', CitationID, NA)) %>%
select(-c(CitationID, CitationIDType)) -> clo
}
clo %<>% rename(Virus = "Pathogen",
VirusGenus = "PathogenGenus",
VirusFamily = "PathogenFamily",
VirusOrder = "PathogenOrder",
VirusClass = "PathogenClass",
DetectionOriginal = "DetectionMethodOriginal",
VirusNCBIResolved = "PathogenNCBIResolved",
VirusOriginal = "PathogenOriginal",
VirusTaxID = "PathogenTaxID")
clo %<>% select(-c(PathogenType,
Detection_NotSpecified,
Detection_Serology,
Detection_Genetic,
Detection_Isolation))
clo %<>% mutate(NCBIAccession = as.character(NCBIAccession))
clo %<>% select(-ICTVRatified)
# colnames(clo)[!(colnames(clo) %in% colnames(temp))] # Deleted check
bind_rows(temp, clo) -> clo
# Consistency steps: all lowercase names
clo %<>% mutate_at(c("Host", "HostGenus", "HostFamily", "HostOrder", "HostClass",
"Virus", "VirusGenus", "VirusFamily", "VirusOrder", "VirusClass"),
tolower)
write_csv(clo, 'Intermediate/Formatted/CLOVERFormatted.csv')
setwd("~/Github/virion")
library(tidyverse); library(magrittr); library(vroom)
gb <- vroom("Intermediate/Formatted/GenbankFormatted.csv.gz")
clo <- read_csv("Intermediate/Formatted/CloverFormatted.csv")
sra <- read_csv("Intermediate/Formatted/SRAFormatted.csv")
pred <- read_csv("Intermediate/Formatted/PredictFormatted.csv")
globi <- read_csv("Intermediate/Formatted/GLOBIFormatted.csv")
if(class(clo$NCBIAccession)=='numeric') {clo %<>% mutate(NCBIAccession = as.character(NCBIAccession))}
virion <- bind_rows(clo, pred, gb, sra, globi)
vroom_write(virion, "Intermediate/Formatted/VIRIONUnprocessed.csv.gz")
virion <- vroom("Intermediate/Formatted/VIRIONUnprocessed.csv.gz")
# # Is there anything that's not vertebrate in here?
#
# virion %>% filter(!(HostClass %in% c("actinopteri",
#                                      "actinopterygii",
#                                      "amphibia",
#                                      "aves",
#                                      "chondrichthyes",
#                                      "cladistia",
#                                      "hyperoartia",
#                                      "lepidosauria",
#                                      "mammalia",
#                                      "myxini",
#                                      "reptilia"))) %>%
#   filter(!is.na(HostClass)) %>% View()
# Deal with the phage
virion %<>%
filter(!str_detect(Virus, "phage")|is.na(Virus),
!str_detect(Virus, "bacteri")|is.na(Virus)) %>%
filter(!(VirusFamily %in% c("turriviridae",
"ackermannviridae",
"myoviridae",
"siphoviridae",
"podoviridae",
"sphaerolipoviridae",
"pleoplipoviridae",
"tectiviridae",
"leviviridae",
"lipothrixviridae",
"rudiviridae",
"cystoviridae",
"microviridae",
"inoviridae",
"corticoviridae",
"ampullaviridae",
"bicaudaviridae",
"clavaviridae",
"finnlakeviridae",
"fuselloviridae",
"globuloviridae",
"guttaviridae",
"plasmaviridae",
"portogloboviridae",
"spiraviridae",
"tristomaviridae",
"megaviridae")),
!(VirusOrder %in% c("belfryvirales",
"caudovirales",
"halopanivirales",
"haloruvirales",
"kalamavirales",
"levivirales",
"ligamenvirales",
"mindivirales",
"petitvirales",
"tubulavirales",
"vinavirales")))
ictv <- read_csv("Source/ICTV Master Species List 2019.v1.csv")
virion %<>% mutate(ICTVRatified = (Virus %in% str_to_lower(ictv$Species)))
virion %<>% distinct()
vroom_write(virion, "Virion/Virion.csv.gz")
# 0X_Dissolve VIRION into component parts ####
library(magrittr)
library(tidyverse)
library(vroom)
virion <- vroom("Virion/Virion.csv.gz")
fixer <- function(x) {toString(unique(unlist(x)))}
# Why is there no host genus? Needs to be fixed in NCBI
virion %<>% filter(!is.na(HostTaxID),
!is.na(VirusTaxID))
virion %>%
select(HostTaxID, Host, HostGenus, HostFamily, HostOrder, HostClass, HostSynonyms, HostNCBIResolved) %>%
group_by_at(vars(-c("HostSynonyms"))) %>%
summarise_at(vars(c("HostSynonyms")), ~list(.x)) %>%
arrange(Host) %>%
mutate(HostSynonyms = sapply(HostSynonyms, fixer)) -> host.tax
virion %>%
select(VirusTaxID, Virus, VirusGenus, VirusFamily, VirusOrder, VirusClass, VirusNCBIResolved, ICTVRatified) %>%
arrange(Virus) %>%
unique() -> virus.tax
# Output the taxonomy files, and return associations without them
write_csv(host.tax, "Virion/TaxonomyHost.csv")
write_csv(virus.tax, "Virion/TaxonomyVirus.csv")
virion %<>%
select(-c(Host, HostNCBIResolved, HostGenus, HostFamily, HostOrder, HostClass, HostSynonyms,
Virus, VirusNCBIResolved, VirusGenus, VirusFamily, VirusOrder, VirusClass, ICTVRatified)) #
# Organize the sampling information into an ID-linked column
virion %<>%
mutate(AssocID = row_number()) %>%
relocate(AssocID, .before = everything())
virion %>%
select(AssocID,
HostOriginal, VirusOriginal,
Database, DatabaseVersion,
ReferenceText,
PMID) -> provenance
virion %>%
select(AssocID,
DetectionMethod, DetectionOriginal,
HostFlagID, VirusFlagContaminant,
NCBIAccession) -> detection
virion %>%
select(AssocID,
PublicationYear,
ReleaseYear, ReleaseMonth, ReleaseDay,
CollectionYear, CollectionMonth, CollectionDay) -> temporal
vroom_write(provenance, "Virion/Provenance.csv.gz")
vroom_write(detection, "Virion/Detection.csv.gz")
vroom_write(temporal, "Virion/Temporal.csv.gz")
virion %<>%
select(-c(Database, DatabaseVersion,
ReferenceText,
PMID,
DetectionMethod, DetectionOriginal,
HostOriginal, VirusOriginal,
HostFlagID, VirusFlagContaminant,
NCBIAccession,
PublicationYear,
ReleaseYear, ReleaseMonth, ReleaseDay,
CollectionYear, CollectionMonth, CollectionDay))
virion %<>%
group_by(HostTaxID, VirusTaxID) %>%
summarise_at(vars(c("AssocID")), ~list(.x)) %>%
mutate(AssocID = sapply(AssocID, fixer))
write_csv(virion, "Virion/Edgelist.csv")
library(classInt)
library(tidyverse)
library(raster)
library(rgdal)
library(dismo)
library(XML)
library(maps)
library(sp)
library(velox)
setwd("~/Github/hantaro")
set.seed(12345)
# Read in the data
pred <- read_csv("./data/clean files/hantaro predictions.csv")
# 1. Threshold the results
library(PresenceAbsence)
###################### INTERMISSION: THRESHOLD IMPACTS
ts.p <- optimal.thresholds(data.frame(pred[,c('treename','PCR','pred_pcr')]),
threshold = 10001,
opt.methods = c(2,4,5,10),
req.sens = 0.90,
na.rm = TRUE)
cut.p <- function(x) {sum(pred$pred_pcr[pred$PCR==0] > x)}
sapply(unlist(ts.p[2]), cut.p)
ts.c <- optimal.thresholds(data.frame(pred[,c('treename','competence','pred_comp')]),
threshold = 10001,
opt.methods = c(2,4,5,10),
req.sens = 0.90,
na.rm = TRUE)
cut.c <- function(x) {sum(pred$pred_comp[pred$competence==0] > x)}
sapply(unlist(ts.c[2]), cut.c)
###################### MOVE FORWARD
t.pcr <- optimal.thresholds(data.frame(pred[,c('treename','PCR','pred_pcr')]),
threshold = 10001,
opt.methods = 10,
req.sens = 0.95,
na.rm = TRUE)
t.comp <- optimal.thresholds(data.frame(pred[,c('treename','competence','pred_comp')]),
threshold = 10001,
opt.methods = 10,
req.sens = 0.95,
na.rm = TRUE)
# Threshold the results to binary outputs
pred %>%
mutate(bin_comp = (pred_comp > t.comp$pred_comp),
bin_pcr = (pred_pcr) > t.pcr$pred_pcr) -> pred
# How many predicted undiscovered hosts by PCR?
table(pred$pred_pcr[pred$PCR==0] > t.pcr$pred_pcr)
# How many predicted undiscovered hosts by competence
table(pred$pred_comp[pred$competence==0] > t.comp$pred_comp)
# Do the predicted competence hosts overlap with PCR
pred %>% filter(competence==0, pred_comp > t.comp$pred_comp)
# Pull out the relevant lists
pred %>% filter(competence==1) %>% pull(treename) %>% gsub("_"," ",.) -> known.comp
pred %>% filter(PCR==1) %>% pull(treename) %>% gsub("_"," ",.) -> known.pcr
pred %>% filter(bin_comp==1) %>% pull(treename) %>% gsub("_"," ",.) -> pred.comp
pred %>% filter(bin_pcr==1) %>% pull(treename) %>% gsub("_"," ",.) -> pred.pcr
sort(pred.pcr[!(pred.pcr %in% known.pcr)])
sort(pred.comp[!(pred.comp %in% known.comp)])
# 2. Let's make some maps?
library(fasterize)
library(rgdal)
library(raster)
library(sf)
iucn <- st_read(dsn = "C:/Users/cjcar/Dropbox/HowManyHelminths2019", layer='TERRESTRIAL_MAMMALS')
r <- disaggregate(getData("worldclim",var="alt",res=2.5)*0,2) # Make a blank raster
# Create four layers
iucn.1 <- iucn[iucn$binomial %in% known.comp,]
iucn.2 <- iucn[iucn$binomial %in% known.pcr,]
iucn.3 <- iucn[iucn$binomial %in% pred.comp,]
iucn.4 <- iucn[iucn$binomial %in% pred.pcr,]
map.knc <- (fasterize(iucn.1, r, fun="sum"))
map.knp <- (fasterize(iucn.2, r, fun="sum"))
map.prc <- (fasterize(iucn.3, r, fun="sum"))
map.prp <- (fasterize(iucn.4, r, fun="sum"))
fix <- function(x) {sum(x,r,na.rm=TRUE)+r} # This adds zeros for the continental area
map.knc <- fix(map.knc)
map.knp <- fix(map.knp)
map.prc <- fix(map.prc)
map.prp <- fix(map.prp)
raster::stack(map.knp, map.knc, map.prp, map.prc) %>%
crop(c(-170,-25,-90,90)) %>%
raster::trim() -> maps
names(maps) <- c('KnownPCR', 'KnownComp', 'PredPCR', 'PredComp')
# Generate the actual visualization
library(rasterVis)
library(RColorBrewer)
mycolors <- colorRampPalette(rev(brewer.pal(10,"Spectral")))(21)
mycolors[1] <- "#C0C0C0"
rasterVis::levelplot(maps,
col.regions = mycolors,
#at = seq(0, 15, 1),
alpha = 0.5,
scales=list(alternating=FALSE),
par.strip.text=list(cex=0),
xlab = NULL, ylab = NULL,
maxpixels = 5e6)
