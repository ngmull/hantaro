y="feature rank for competence")+
theme(axis.text=element_text(size=10),
axis.title=element_text(size=12))+
theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank())+
theme(axis.title.x=element_text(margin=margin(t=10,r=0,b=0,l=0)))+
theme(axis.title.y=element_text(margin=margin(t=0,r=10,b=0,l=0)))
## Figure 2
library(ggpubr)
setwd("~/Desktop/hantaro/figs")
png("Figure 2.png",width=7,height=3.5,units="in",res=300)
ggarrange(f2A,f2B,ncol=2,widths=c(1,1),
labels=c("(A)","(B)"),
label.x=c(0.21,0.18),
label.y=0.97,
font.label=list(face="plain",size=12))
dev.off()
## figure 2B
f2B=ggplot(ranks2,aes(pcr_rank,comp_rank))+
#geom_point()+
geom_label(aes(label=var),size=2,fill=col,alpha=0.2)+
#scale_y_reverse(limits=c(max(c(ranks$comp_rank,ranks$pcr_rank))+3,0))+
#scale_x_reverse(limits=c(max(c(ranks$comp_rank,ranks$pcr_rank))+3,0))+
scale_y_reverse()+
scale_x_reverse()+
#geom_abline(slope=1,linetype=2,size=0.5)+
theme_bw()+
labs(x="feature rank for PCR",
y="feature rank for competence")+
theme(axis.text=element_text(size=10),
axis.title=element_text(size=12))+
theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank())+
theme(axis.title.x=element_text(margin=margin(t=10,r=0,b=0,l=0)))+
theme(axis.title.y=element_text(margin=margin(t=0,r=10,b=0,l=0)))
## Figure 2
library(ggpubr)
setwd("~/Desktop/hantaro/figs")
png("Figure 2.png",width=7,height=3.5,units="in",res=300)
ggarrange(f2A,f2B,ncol=2,widths=c(1,1),
labels=c("(A)","(B)"),
label.x=c(0.21,0.18),
label.y=0.97,
font.label=list(face="plain",size=12))
dev.off()
## figure 2B
f2B=ggplot(ranks2,aes(pcr_rank,comp_rank))+
#geom_point()+
geom_label(aes(label=var),size=2,fill=col,alpha=0.2)+
#scale_y_reverse(limits=c(max(c(ranks$comp_rank,ranks$pcr_rank))+3,0))+
#scale_x_reverse(limits=c(max(c(ranks$comp_rank,ranks$pcr_rank))+3,0))+
scale_y_reverse(limits=c(max(c(ranks2$comp_rank,ranks2$pcr_rank))+3,0))+
scale_x_reverse(limits=c(max(c(ranks2$comp_rank,ranks2$pcr_rank))+3,0))+
#geom_abline(slope=1,linetype=2,size=0.5)+
theme_bw()+
labs(x="feature rank for PCR",
y="feature rank for competence")+
theme(axis.text=element_text(size=10),
axis.title=element_text(size=12))+
theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank())+
theme(axis.title.x=element_text(margin=margin(t=10,r=0,b=0,l=0)))+
theme(axis.title.y=element_text(margin=margin(t=0,r=10,b=0,l=0)))
## Figure 2
library(ggpubr)
setwd("~/Desktop/hantaro/figs")
png("Figure 2.png",width=7,height=3.5,units="in",res=300)
ggarrange(f2A,f2B,ncol=2,widths=c(1,1),
labels=c("(A)","(B)"),
label.x=c(0.21,0.18),
label.y=0.97,
font.label=list(face="plain",size=12))
dev.off()
View(ts2)
## rerank
ranks2=ranks2[order(ranks2$pcr_imp,decreasing=T)]
## rerank
ranks2=ranks2[order(ranks2$pcr_imp,decreasing=T),]
View(ranks2)
## rerank
ranks2=ranks2[order(ranks2$pcr_imp,decreasing=T),]
View(ranks2)
ranks2$pcr_rank=1:nrow(ranks2)
ranks2=ranks2[order(ranks2$comp_imp,decreasing=T),]
View(ranks2)
ranks2$comp_rank=1:nrow(ranks2)
cor.test(ranks2$pcr_rank,ranks2$comp_rank,method="spearman")
## set color
col='grey70'
## figure 2A
set.seed(1)
f2A=ggplot(adata,aes(response,auc))+
geom_boxplot(width=0.5,alpha=0.25,colour=col,fill=col)+
geom_jitter(width=0.1,colour=col,size=3,alpha=1)+
scale_x_discrete(labels=c("infection","competence"))+
guides(colour=F)+
ylim(0.8,1)+
theme_bw()+
labs(x="response variable",
y="BRT AUC")+
theme(axis.text=element_text(size=10),
axis.text.x=element_text(size=12),
axis.title=element_text(size=12))+
theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank())+
theme(axis.title.x=element_text(margin=margin(t=10,r=0,b=0,l=0)))+
theme(axis.title.y=element_text(margin=margin(t=0,r=10,b=0,l=0)))+
guides(colour=F,fill=F)
## figure 2B
f2B=ggplot(ranks2,aes(pcr_rank,comp_rank))+
#geom_point()+
geom_label(aes(label=var),size=2,fill=col,alpha=0.2)+
#scale_y_reverse(limits=c(max(c(ranks$comp_rank,ranks$pcr_rank))+3,0))+
#scale_x_reverse(limits=c(max(c(ranks$comp_rank,ranks$pcr_rank))+3,0))+
scale_y_reverse(limits=c(max(c(ranks2$comp_rank,ranks2$pcr_rank))+3,0))+
scale_x_reverse(limits=c(max(c(ranks2$comp_rank,ranks2$pcr_rank))+3,0))+
#geom_abline(slope=1,linetype=2,size=0.5)+
theme_bw()+
labs(x="feature rank for PCR",
y="feature rank for competence")+
theme(axis.text=element_text(size=10),
axis.title=element_text(size=12))+
theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank())+
theme(axis.title.x=element_text(margin=margin(t=10,r=0,b=0,l=0)))+
theme(axis.title.y=element_text(margin=margin(t=0,r=10,b=0,l=0)))
## Figure 2
library(ggpubr)
setwd("~/Desktop/hantaro/figs")
png("Figure 2.png",width=7,height=3.5,units="in",res=300)
ggarrange(f2A,f2B,ncol=2,widths=c(1,1),
labels=c("(A)","(B)"),
label.x=c(0.21,0.18),
label.y=0.97,
font.label=list(face="plain",size=12))
dev.off()
## figure 2B
f2B=ggplot(ranks2,aes(pcr_rank,comp_rank))+
#geom_point()+
geom_label(aes(label=var),size=2,fill=col,alpha=0.2)+
#scale_y_reverse(limits=c(max(c(ranks$comp_rank,ranks$pcr_rank))+3,0))+
#scale_x_reverse(limits=c(max(c(ranks$comp_rank,ranks$pcr_rank))+3,0))+
scale_y_reverse(limits=c(max(c(ranks2$comp_rank,ranks2$pcr_rank))+4,0))+
scale_x_reverse(limits=c(max(c(ranks2$comp_rank,ranks2$pcr_rank))+4,0))+
#geom_abline(slope=1,linetype=2,size=0.5)+
theme_bw()+
labs(x="feature rank for PCR",
y="feature rank for competence")+
theme(axis.text=element_text(size=10),
axis.title=element_text(size=12))+
theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank())+
theme(axis.title.x=element_text(margin=margin(t=10,r=0,b=0,l=0)))+
theme(axis.title.y=element_text(margin=margin(t=0,r=10,b=0,l=0)))
## Figure 2
library(ggpubr)
setwd("~/Desktop/hantaro/figs")
png("Figure 2.png",width=7,height=3.5,units="in",res=300)
ggarrange(f2A,f2B,ncol=2,widths=c(1,1),
labels=c("(A)","(B)"),
label.x=c(0.21,0.18),
label.y=0.97,
font.label=list(face="plain",size=12))
dev.off()
## function for compiling across BRTs for a given predictor, all else equal
pdp_agg=function(mod,feature){
## just the plot function
pdep=plot(mod$mod,feature,
return.grid=T,
n.trees=mod$best,
plot=F,
continuous.resolution=200,
type="response")
## add seed
pdep$seed=unique(mod$roc$seed)
## save predictor
pdep$predictor=pdep[feature][,1]
## order
pdep=pdep[order(pdep$predictor),]
## get rank
pdep$rank=1:nrow(pdep)
## save yhat
pdep$yhat=pdep$y
## return
return(pdep)
}
## function to plot
pdp_plot=function(bmods,feature){
## pdp_agg
agg=do.call(rbind,lapply(bmods,function(x) pdp_agg(x,feature)))
## get class of the feature
cl=class(data[feature][,1])
## if else based on type
if(cl%in%c("numeric","integer")){
## get element-wise means
x=with(agg,tapply(predictor,rank,mean))
y=with(agg,tapply(yhat,rank,mean))
## save as mean
pmean=data.frame(predictor=x,yhat=y)
## get yrange
yrange=range(agg$yhat,pmean$yhat,na.rm=T)
## get histogram
hi=hist(data[feature][,1],breaks=30,plot=F)
hi=with(hi,data.frame(breaks[1:(length(breaks)-1)],counts))
names(hi)=c("mids","counts")
## ggplot it
ggplot(agg,aes(predictor,yhat,group=seed))+
## add histogram
geom_segment(data=hi,inherit.aes=F,
aes(x=mids,xend=mids,
y=yrange[1],yend=plotrix::rescale(counts,yrange)),
size=1,colour=col,alpha=0.25)+
## add lines
geom_line(size=1,alpha=0.5,colour=col)+
## add mean
geom_line(data=pmean,size=2,inherit.aes=F,
aes(predictor,yhat))+
## theme
theme_bw()+
theme(axis.text=element_text(size=6),
axis.title=element_text(size=7))+
theme(axis.title.x=element_text(margin=margin(t=5,r=0,b=0,l=0)))+
theme(axis.title.y=element_text(margin=margin(t=0,r=5,b=0,l=0)))+
theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank())+
labs(x=feature2,y="marginal effect")+
scale_y_continuous(labels=scales::number_format(accuracy=0.01))
## end numeric
}else{ ## factor-based plot
## get element-wise means
y=with(agg,tapply(yhat,predictor,mean))
## save as mean
#pmean=data.frame(predictor=x,yhat=y)
pmean=data.frame(y)
names(pmean)="yhat"
pmean$predictor=rownames(pmean)
rownames(pmean)=NULL
## make temp data
temp=data
temp$predictor=temp[feature][,1]
## do nothing
agg=agg
pmean=pmean
temp=temp
## get yrange
yrange=range(agg$yhat,pmean$yhat,na.rm=T)
## fix temp to yrange
temp$yhat=ifelse(temp$hPCR==1,max(yrange),min(yrange))
## ggplot with rug
set.seed(1)
ggplot(agg,aes(predictor,yhat,group=seed))+
## add individual BRTs
geom_jitter(size=1,alpha=0.5,colour=col,width=0.1)+
## add mean
geom_point(data=pmean,size=2,inherit.aes=F,shape=15,
aes(predictor,yhat))+
## add rug
geom_rug(data=temp,inherit.aes=F,
aes(predictor,yhat),
sides="b",position="jitter",
colour=col,alpha=0.25,
na.rm=T)+
## theme
theme_bw()+
theme(axis.text=element_text(size=6),
axis.title=element_text(size=7))+
theme(axis.title.x=element_text(margin=margin(t=5,r=0,b=0,l=0)))+
theme(axis.title.y=element_text(margin=margin(t=0,r=5,b=0,l=0)))+
theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank())+
labs(x=feature2,y="marginal effect")+
scale_y_continuous(limits=c(yrange[1]-0.01,yrange[2]+0.01),
labels=scales::number_format(accuracy=0.01))
}
}
## top PCR
ranks2[order(ranks2$pcr_rank),]
## top PCR
ranks2ranks2[order(ranks2$pcr_rank),]
## top PCR
ranks2=ranks2[order(ranks2$pcr_rank),]
ranks2$var
ranks2$var[1]
pdp_plot(pcr_brts,ranks2$var[1])
## function to plot
pdp_plot=function(bmods,feature){
## pdp_agg
agg=do.call(rbind,lapply(bmods,function(x) pdp_agg(x,feature)))
## get class of the feature
cl=class(data[feature][,1])
## if else based on type
if(cl%in%c("numeric","integer")){
## get element-wise means
x=with(agg,tapply(predictor,rank,mean))
y=with(agg,tapply(yhat,rank,mean))
## save as mean
pmean=data.frame(predictor=x,yhat=y)
## get yrange
yrange=range(agg$yhat,pmean$yhat,na.rm=T)
## get histogram
hi=hist(data[feature][,1],breaks=30,plot=F)
hi=with(hi,data.frame(breaks[1:(length(breaks)-1)],counts))
names(hi)=c("mids","counts")
## ggplot it
ggplot(agg,aes(predictor,yhat,group=seed))+
## add histogram
geom_segment(data=hi,inherit.aes=F,
aes(x=mids,xend=mids,
y=yrange[1],yend=plotrix::rescale(counts,yrange)),
size=1,colour=col,alpha=0.25)+
## add lines
geom_line(size=1,alpha=0.5,colour=col)+
## add mean
geom_line(data=pmean,size=2,inherit.aes=F,
aes(predictor,yhat))+
## theme
theme_bw()+
theme(axis.text=element_text(size=6),
axis.title=element_text(size=7))+
theme(axis.title.x=element_text(margin=margin(t=5,r=0,b=0,l=0)))+
theme(axis.title.y=element_text(margin=margin(t=0,r=5,b=0,l=0)))+
theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank())+
labs(x=feature,y="marginal effect")+
scale_y_continuous(labels=scales::number_format(accuracy=0.01))
## end numeric
}else{ ## factor-based plot
## get element-wise means
y=with(agg,tapply(yhat,predictor,mean))
## save as mean
#pmean=data.frame(predictor=x,yhat=y)
pmean=data.frame(y)
names(pmean)="yhat"
pmean$predictor=rownames(pmean)
rownames(pmean)=NULL
## make temp data
temp=data
temp$predictor=temp[feature][,1]
## do nothing
agg=agg
pmean=pmean
temp=temp
## get yrange
yrange=range(agg$yhat,pmean$yhat,na.rm=T)
## fix temp to yrange
temp$yhat=ifelse(temp$hPCR==1,max(yrange),min(yrange))
## ggplot with rug
set.seed(1)
ggplot(agg,aes(predictor,yhat,group=seed))+
## add individual BRTs
geom_jitter(size=1,alpha=0.5,colour=col,width=0.1)+
## add mean
geom_point(data=pmean,size=2,inherit.aes=F,shape=15,
aes(predictor,yhat))+
## add rug
geom_rug(data=temp,inherit.aes=F,
aes(predictor,yhat),
sides="b",position="jitter",
colour=col,alpha=0.25,
na.rm=T)+
## theme
theme_bw()+
theme(axis.text=element_text(size=6),
axis.title=element_text(size=7))+
theme(axis.title.x=element_text(margin=margin(t=5,r=0,b=0,l=0)))+
theme(axis.title.y=element_text(margin=margin(t=0,r=5,b=0,l=0)))+
theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank())+
labs(x=feature,y="marginal effect")+
scale_y_continuous(limits=c(yrange[1]-0.01,yrange[2]+0.01),
labels=scales::number_format(accuracy=0.01))
}
}
## top PCR
ranks2=ranks2[order(ranks2$pcr_rank),]
pdp_plot(pcr_brts,ranks2$var[1])
bmods=pcr_brts
feature=ranks2$var[1]
## pdp_agg
agg=do.call(rbind,lapply(bmods,function(x) pdp_agg(x,feature)))
## get class of the feature
cl=class(data[feature][,1])
## load files
setwd("~/Desktop/hantaro/data/clean files")
data=read.csv('hantaro cleaned response and traits.csv')
## classify true negatives
data$type=ifelse(data$studies>0 & data$hPCR==0 & data$competence==0,"true negative","other")
## top PCR
ranks2=ranks2[order(ranks2$pcr_rank),]
pdp_plot(pcr_brts,ranks2$var[1])
pdp_plot(pcr_brts,ranks2$var[1])
pdp_plot(pcr_brts,ranks2$var[2])
pdp_plot(pcr_brts,ranks2$var[3])
pdp_plot(pcr_brts,ranks2$var[4])
pdp_plot(pcr_brts,ranks2$var[5])
pdp_plot(pcr_brts,ranks2$var[5])
ranks2$var[5]
View(data)
## load files
setwd("~/Desktop/hantaro/data/clean files")
data=read.csv('hantaro cleaned response and traits.csv')
## classify true negatives
data$type=ifelse(data$studies>0 & data$hPCR==0 & data$competence==0,"true negative","other")
## make binary columns for genus
dums=dummy_cols(data["gen"])
## unique
dums=dums[!duplicated(dums$gen),]
## ensure all factor
for(i in 1:ncol(dums)){
## column as factor
dums[,i]=factor(dums[,i])
}
?dummy_cols
library(fastDummies)
## load files
setwd("~/Desktop/hantaro/data/clean files")
data=read.csv('hantaro cleaned response and traits.csv')
## classify true negatives
data$type=ifelse(data$studies>0 & data$hPCR==0 & data$competence==0,"true negative","other")
## make binary columns for genus
dums=dummy_cols(data["gen"])
## unique
dums=dums[!duplicated(dums$gen),]
## ensure all factor
for(i in 1:ncol(dums)){
## column as factor
dums[,i]=factor(dums[,i])
}
## merge
data=merge(data,dums,by="gen",all.x=T)
rm(dums)
## top PCR
ranks2=ranks2[order(ranks2$pcr_rank),]
pdp_plot(pcr_brts,ranks2$var[1])
pdp_plot(pcr_brts,ranks2$var[2])
pdp_plot(pcr_brts,ranks2$var[3])
pdp_plot(pcr_brts,ranks2$var[4])
pdp_plot(pcr_brts,ranks2$var[5])
## top PCR
ranks2=ranks2[order(ranks2$pcr_rank),]
pdp_plot(pcr_brts,ranks2$var[1])
pdp_plot(pcr_brts,ranks2$var[2])
pdp_plot(pcr_brts,ranks2$var[3])
pdp_plot(pcr_brts,ranks2$var[4])
pdp_plot(pcr_brts,ranks2$var[5])
pdp_plot(pcr_brts,ranks2$var[6])
pdp_plot(pcr_brts,ranks2$var[7])
pdp_plot(pcr_brts,ranks2$var[8])
pdp_plot(pcr_brts,ranks2$var[9])
pdp_plot(pcr_brts,ranks2$var[10])
View(ranks2)
pdp_plot(pcr_brts,ranks2$var[9])
p1=pdp_plot(pcr_brts,ranks2$var[1])
p2=pdp_plot(pcr_brts,ranks2$var[2])
p3=pdp_plot(pcr_brts,ranks2$var[3])
p4=pdp_plot(pcr_brts,ranks2$var[4])
p5=pdp_plot(pcr_brts,ranks2$var[5])
p6=pdp_plot(pcr_brts,ranks2$var[6])
p7=pdp_plot(pcr_brts,ranks2$var[7])
p8=pdp_plot(pcr_brts,ranks2$var[8])
p9=pdp_plot(pcr_brts,ranks2$var[9])
p10=pdp_plot(pcr_brts,ranks2$var[10])
## top competence
ranks2=ranks2[order(ranks2$comp_rank),]
## top competence
ranks2=ranks2[order(ranks2$comp_rank),]
c1=pdp_plot(comp_brts,ranks2$var[1])
c2=pdp_plot(comp_brts,ranks2$var[2])
c3=pdp_plot(comp_brts,ranks2$var[3])
c4=pdp_plot(comp_brts,ranks2$var[4])
c5=pdp_plot(comp_brts,ranks2$var[5])
c6=pdp_plot(comp_brts,ranks2$var[6])
c7=pdp_plot(comp_brts,ranks2$var[7])
c8=pdp_plot(comp_brts,ranks2$var[8])
c9=pdp_plot(comp_brts,ranks2$var[9])
c10=pdp_plot(comp_brts,ranks2$var[10])
## compile
ggarrange(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,
c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,
ncol=2)
p1
c1
## compile
ggarrange(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,
c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,
ncol=2,nrow=10)
## compile
setwd("~/Desktop/hantaro/figs")
png("Figure S1.png",width=4,height=9,units="in",res=300)
ggarrange(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,
c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,
ncol=2,nrow=10)
dev.off()
## top competence
ranks2=ranks2[order(ranks2$comp_rank),]
ranks2$var
pdp_plot(comp_brts,ranks2$var[1])
?ggarrange
ggarrange(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,
ncol=2,nrow=10)
## compile
library(patchwork)
p1+p2+p3+p4+p5+p6+p7+p8+p9+p10+
c1+c2+c3+c4+c5+c6+c7+c8+c9+c10+plot_layout(nrow=10,ncol=2)
p1+p2+p3+p4+p5+p6+p7+p8+p9+p10+
c1+c2+c3+c4+c5+c6+c7+c8+c9+c10+plot_layout(nrow=10,ncol=2,byrow=T)
p1+p2+p3+p4+p5+p6+p7+p8+p9+p10+
c1+c2+c3+c4+c5+c6+c7+c8+c9+c10+plot_layout(nrow=10,ncol=2,byrow=F)
setwd("~/Desktop/hantaro/figs")
png("Figure S1.png",width=4,height=9,units="in",res=300)
p1+p2+p3+p4+p5+p6+p7+p8+p9+p10+
c1+c2+c3+c4+c5+c6+c7+c8+c9+c10+plot_layout(nrow=10,ncol=2,byrow=F)
# ggarrange(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,
#           ncol=2,nrow=10)
dev.off()
## compile
library(patchwork)
setwd("~/Desktop/hantaro/figs")
png("Figure S1.png",width=4,height=10,units="in",res=300)
p1+p2+p3+p4+p5+p6+p7+p8+p9+p10+
c1+c2+c3+c4+c5+c6+c7+c8+c9+c10+plot_layout(nrow=10,ncol=2,byrow=F)
dev.off()
